Option Explicit

Sub ConvertJTDtoPDF()
Dim sourcePath As String
Dim destPath As String
Dim jtApp As Object
Dim jtDoc As Object
Dim fso As Object
Dim folder As Object
Dim file As Object
Dim fileName As String
Dim pdfName As String

```
' フォルダパスの設定
sourcePath = "C:\変換元"
destPath = "C:\変換後"

' FileSystemObjectの作成
Set fso = CreateObject("Scripting.FileSystemObject")

' 保存先フォルダが存在しない場合は作成
If Not fso.FolderExists(destPath) Then
    fso.CreateFolder destPath
End If

On Error GoTo ErrorHandler

' 一太郎アプリケーションの起動
Set jtApp = CreateObject("JXW.Application")
jtApp.Visible = True ' デバッグ用に表示（非表示にする場合はFalse）

' ソースフォルダを取得
Set folder = fso.GetFolder(sourcePath)

' フォルダ内のファイルをループ処理
For Each file In folder.Files
    If LCase(fso.GetExtensionName(file.Name)) = "jtd" Then
        fileName = file.Path
        pdfName = destPath & "\" & fso.GetBaseName(file.Name) & ".pdf"
        
        Debug.Print "変換中: " & fileName
        
        ' 一太郎でファイルを開く
        Set jtDoc = jtApp.Documents.Open(fileName)
        
        ' PDFとして印刷（一太郎のPDF出力機能を使用）
        jtDoc.PrintOut Background:=False, OutputFileName:=pdfName, PrintToFile:=True
        
        ' ドキュメントを閉じる
        jtDoc.Close SaveChanges:=False
        
        Debug.Print "変換完了: " & pdfName
    End If
Next file

' 一太郎を終了
jtApp.Quit

MsgBox "すべてのJTDファイルをPDFに変換しました。", vbInformation

GoTo Cleanup
```

ErrorHandler:
MsgBox “エラーが発生しました: “ & Err.Description, vbExclamation

Cleanup:
’ オブジェクトの解放
Set jtDoc = Nothing
Set jtApp = Nothing
Set file = Nothing
Set folder = Nothing
Set fso = Nothing
End Sub

’ 代替案：Windows10のMicrosoft Print to PDFを使用する方法
Sub ConvertJTDtoPDF_Alternative()
Dim sourcePath As String
Dim destPath As String
Dim jtApp As Object
Dim jtDoc As Object
Dim fso As Object
Dim folder As Object
Dim file As Object
Dim fileName As String
Dim pdfName As String
Dim originalPrinter As String

```
' フォルダパスの設定
sourcePath = "C:\変換元"
destPath = "C:\変換後"

' FileSystemObjectの作成
Set fso = CreateObject("Scripting.FileSystemObject")

' 保存先フォルダが存在しない場合は作成
If Not fso.FolderExists(destPath) Then
    fso.CreateFolder destPath
End If

On Error GoTo ErrorHandler

' 一太郎アプリケーションの起動
Set jtApp = CreateObject("JXW.Application")
jtApp.Visible = False ' バックグラウンドで実行

' 現在のプリンタを保存
originalPrinter = jtApp.ActivePrinter

' Microsoft Print to PDFに変更
jtApp.ActivePrinter = "Microsoft Print to PDF"

' ソースフォルダを取得
Set folder = fso.GetFolder(sourcePath)

' フォルダ内のファイルをループ処理
For Each file In folder.Files
    If LCase(fso.GetExtensionName(file.Name)) = "jtd" Then
        fileName = file.Path
        pdfName = destPath & "\" & fso.GetBaseName(file.Name) & ".pdf"
        
        Application.StatusBar = "変換中: " & file.Name
        
        ' 一太郎でファイルを開く
        Set jtDoc = jtApp.Documents.Open(fileName)
        
        ' PDFとして印刷
        jtDoc.PrintOut Background:=False, PrintToFile:=True, OutputFileName:=pdfName
        
        ' ドキュメントを閉じる
        jtDoc.Close SaveChanges:=False
        
        DoEvents ' Excelの応答性を保つ
    End If
Next file

' 元のプリンタに戻す
jtApp.ActivePrinter = originalPrinter

' 一太郎を終了
jtApp.Quit

Application.StatusBar = ""
MsgBox "すべてのJTDファイルをPDFに変換しました。", vbInformation

GoTo Cleanup
```

ErrorHandler:
MsgBox “エラーが発生しました: “ & Err.Description & vbCrLf & _
“ファイル: “ & fileName, vbExclamation

Cleanup:
’ オブジェクトの解放
Set jtDoc = Nothing
Set jtApp = Nothing
Set file = Nothing
Set folder = Nothing
Set fso = Nothing
Application.StatusBar = “”
End Sub

’ より詳細なエラーハンドリングとログ出力を含むバージョン
Sub ConvertJTDtoPDF_WithLogging()
Dim sourcePath As String
Dim destPath As String
Dim jtApp As Object
Dim jtDoc As Object
Dim fso As Object
Dim folder As Object
Dim file As Object
Dim fileName As String
Dim pdfName As String
Dim logFile As String
Dim logNum As Integer
Dim successCount As Integer
Dim errorCount As Integer

```
' フォルダパスの設定
sourcePath = "C:\変換元"
destPath = "C:\変換後"
logFile = destPath & "\変換ログ_" & Format(Now, "yyyymmdd_hhmmss") & ".txt"

' FileSystemObjectの作成
Set fso = CreateObject("Scripting.FileSystemObject")

' 保存先フォルダが存在しない場合は作成
If Not fso.FolderExists(destPath) Then
    fso.CreateFolder destPath
End If

' ログファイルを開く
logNum = FreeFile
Open logFile For Output As #logNum
Print #logNum, "一太郎→PDF変換ログ"
Print #logNum, "開始時刻: " & Now
Print #logNum, "===================="

On Error Resume Next

' 一太郎アプリケーションの起動
Set jtApp = CreateObject("JXW.Application")
If Err.Number <> 0 Then
    Print #logNum, "エラー: 一太郎の起動に失敗しました - " & Err.Description
    Close #logNum
    MsgBox "一太郎の起動に失敗しました。", vbCritical
    Exit Sub
End If

jtApp.Visible = False

' ソースフォルダを取得
Set folder = fso.GetFolder(sourcePath)

successCount = 0
errorCount = 0

' フォルダ内のファイルをループ処理
For Each file In folder.Files
    If LCase(fso.GetExtensionName(file.Name)) = "jtd" Then
        fileName = file.Path
        pdfName = destPath & "\" & fso.GetBaseName(file.Name) & ".pdf"
        
        Application.StatusBar = "変換中: " & file.Name & " (" & successCount + errorCount + 1 & "個目)"
        
        ' エラーをクリア
        Err.Clear
        
        ' 一太郎でファイルを開く
        Set jtDoc = jtApp.Documents.Open(fileName)
        
        If Err.Number = 0 Then
            ' PDFとして保存
            jtDoc.SaveAs pdfName, FileFormat:=18 ' 18 = PDF形式
            
            If Err.Number = 0 Then
                Print #logNum, "成功: " & file.Name & " → " & fso.GetBaseName(file.Name) & ".pdf"
                successCount = successCount + 1
            Else
                Print #logNum, "エラー: " & file.Name & " - PDF保存失敗: " & Err.Description
                errorCount = errorCount + 1
            End If
            
            ' ドキュメントを閉じる
            jtDoc.Close SaveChanges:=False
        Else
            Print #logNum, "エラー: " & file.Name & " - ファイルを開けません: " & Err.Description
            errorCount = errorCount + 1
        End If
        
        DoEvents
    End If
Next file

' 一太郎を終了
jtApp.Quit

' ログの終了処理
Print #logNum, "===================="
Print #logNum, "終了時刻: " & Now
Print #logNum, "成功: " & successCount & "件"
Print #logNum, "エラー: " & errorCount & "件"
Close #logNum

' オブジェクトの解放
Set jtDoc = Nothing
Set jtApp = Nothing
Set file = Nothing
Set folder = Nothing
Set fso = Nothing

Application.StatusBar = ""

' 結果の表示
MsgBox "変換が完了しました。" & vbCrLf & _
       "成功: " & successCount & "件" & vbCrLf & _
       "エラー: " & errorCount & "件" & vbCrLf & vbCrLf & _
       "詳細はログファイルを確認してください: " & vbCrLf & logFile, vbInformation
```

End Sub
